generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  hashedPassword  String
  role            Role       @default(PATIENT)
  passwordChanged DateTime?
  image           String?
  centerId        String?
  specialization  String?
  accounts        Account[]
  sessions        Session[]
  schedules       Schedule[]
  center          Center?    @relation(fields: [centerId], references: [id])

  doctorAppointment     MedicalAppointment[] @relation(name: "DoctorAppointments")
  patientAppointment    MedicalAppointment[] @relation(name: "PatientAppointments")
  doctorMedicalHistory  MedicalHistory[]     @relation(name: "DoctorMedicalHistory")
  patientMedicalHistory MedicalHistory[]     @relation(name: "PatientMedicalHistory")
}

model Schedule {
  id String @id @default(cuid())

  startTime     String
  departureTime String
  days          String[]
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Center {
  id         String @id @default(cuid())
  name       String @unique
  address    String
  phone      String
  email      String
  department String
  city       String
  users      User[]
}

enum Role {
  ADMIN
  DIRECTOR
  DOCTOR
  SECRETARY
  PATIENT
}

model MedicalAppointment {
  id             String   @id @default(cuid())
  date           DateTime
  type           String
  specialization String?

  patient   User   @relation(name: "PatientAppointments", fields: [patientId], references: [id])
  patientId String
  doctor    User   @relation(name: "DoctorAppointments", fields: [doctorId], references: [id])
  doctorId  String

  status MedicalAppointmentStatus @default(PENDING)

  @@unique([patientId, doctorId, date])
}

enum MedicalAppointmentStatus {
  PENDING
  ACCEPTED
  COMPLETED
}

model MedicalHistory {
  id        String    @id @default(cuid())
  date      DateTime  @default(now())
  deletedAt DateTime?
  fileUrl   String

  patient   User   @relation(name: "PatientMedicalHistory", fields: [patientId], references: [id])
  patientId String
  doctor    User   @relation(name: "DoctorMedicalHistory", fields: [doctorId], references: [id])
  doctorId  String
}
