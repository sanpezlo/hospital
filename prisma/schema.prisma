generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String                      @id @default(cuid())
  name                      String?
  email                     String?                     @unique
  emailVerified             DateTime?
  hashedPassword            String
  role                      Role                        @default(PATIENT)
  passwordChanged           DateTime?
  image                     String?
  centerId                  String?
  accounts                  Account[]
  sessions                  Session[]
  center                    Center?                     @relation(fields: [centerId], references: [id])
  RequestMedicalAppointment RequestMedicalAppointment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Center {
  id                        String                      @id @default(cuid())
  name                      String                      @unique
  address                   String
  phone                     String
  email                     String
  cityId                    String
  city                      City                        @relation(fields: [cityId], references: [id])
  users                     User[]
  RequestMedicalAppointment RequestMedicalAppointment[]
}

model Department {
  id     String @id @default(cuid())
  name   String @unique
  cities City[]
}

model City {
  id           String     @id @default(cuid())
  name         String
  departmentId String
  Center       Center[]
  department   Department @relation(fields: [departmentId], references: [id])

  @@unique([name, departmentId])
}

enum Role {
  ADMIN
  DIRECTOR
  DOCTOR
  SECRETARY
  PATIENT
}

model RequestMedicalAppointment {
  id String @id @default(cuid())

  patientId String
  patient   User   @relation(fields: [patientId], references: [id])

  centerId String
  center   Center @relation(fields: [centerId], references: [id])

  reason String?
  date   DateTime

  createdAt DateTime @default(now())
}

// model MedicalAppointment
